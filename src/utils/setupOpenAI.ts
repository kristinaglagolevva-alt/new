/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API –∫–ª—é—á–∞
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
 * –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ù–ò–ö–û–ì–î–ê –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ!
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ API –∫–ª—é—á
 */
export function isOpenAIConfigured(): boolean {
  const key = localStorage.getItem('OPENAI_API_KEY');
  return Boolean(key && key.trim().length > 0);
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
 */
export function setOpenAIKey(key: string): void {
  if (!key || key.trim().length === 0) {
    console.warn('[OpenAI] –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∫–ª—é—á');
    return;
  }
  
  localStorage.setItem('OPENAI_API_KEY', key.trim());
  console.log('[OpenAI] API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

/**
 * –£–¥–∞–ª—è–µ—Ç API –∫–ª—é—á
 */
export function clearOpenAIKey(): void {
  localStorage.removeItem('OPENAI_API_KEY');
  console.log('[OpenAI] API –∫–ª—é—á —É–¥–∞–ª–µ–Ω');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
 */
export function getOpenAIKey(): string | null {
  return localStorage.getItem('OPENAI_API_KEY');
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
 */
export function isValidKeyFormat(key: string): boolean {
  return key.startsWith('sk-') && key.length > 20;
}

/**
 * –ú–∞—Å–∫–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function maskApiKey(key: string): string {
  if (key.length < 10) return '***';
  return `${key.substring(0, 7)}...${key.substring(key.length - 4)}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
 */
export async function testOpenAIConnection(): Promise<{ success: boolean; error?: string }> {
  const key = getOpenAIKey();
  
  if (!key) {
    return { success: false, error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
  }
  
  if (!isValidKeyFormat(key)) {
    return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞' };
  }
  
  try {
    const response = await fetch('https://api.openai.com/v1/models', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${key}`,
      },
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      return {
        success: false,
        error: errorData.error?.message || `HTTP ${response.status}`,
      };
    }
    
    return { success: true };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
    };
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
 * 
 * –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –¢–û–õ–¨–ö–û –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò!
 */
export function quickSetupForDev(apiKey?: string): void {
  if (isOpenAIConfigured()) {
    console.log('[OpenAI] –ö–ª—é—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', maskApiKey(getOpenAIKey()!));
    return;
  }
  
  // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è dev —Å–µ—Ä–≤–µ—Ä–∞)
  const envKey = (import.meta as any)?.env?.VITE_OPENAI_API_KEY;
  const keyToUse = apiKey || envKey;
  
  if (keyToUse) {
    setOpenAIKey(keyToUse);
    console.log('[OpenAI] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–ª—é—á –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    console.warn('[OpenAI] ‚ö†Ô∏è –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –í –ü–†–û–î–ê–ö–®–ï–ù–ï!');
  } else {
    console.log('[OpenAI] –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
if (typeof window !== 'undefined') {
  (window as any).openai = {
    setup: setOpenAIKey,
    clear: clearOpenAIKey,
    test: testOpenAIConnection,
    isConfigured: isOpenAIConfigured,
    mask: maskApiKey,
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const configured = isOpenAIConfigured();
  
  if (configured) {
    const key = getOpenAIKey()!;
    console.log(
      '%c‚úÖ OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω%c\n' +
      `–ö–ª—é—á: ${maskApiKey(key)}\n` +
      '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: %cawait window.openai.test()%c\n' +
      '–ü–æ–¥—Ä–æ–±–Ω–µ–µ: README_OPENAI.md',
      'color: #10a37f; font-weight: bold; font-size: 14px',
      'color: inherit',
      'color: #0066cc; background: #f0f0f0; padding: 2px 4px; border-radius: 3px',
      'color: inherit'
    );
  } else {
    console.log(
      '%cü§ñ OpenAI AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤%c\n\n' +
      'üìù –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:\n' +
      '%c  window.openai.setup("–≤–∞—à-api-–∫–ª—é—á")%c\n\n' +
      'üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '  ‚Ä¢ window.openai.setup("–∫–ª—é—á") - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á\n' +
      '  ‚Ä¢ window.openai.test() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n' +
      '  ‚Ä¢ window.openai.clear() - —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á\n' +
      '  ‚Ä¢ window.openai.isConfigured() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É\n\n' +
      'üìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_OPENAI.md',
      'color: #10a37f; font-weight: bold; font-size: 16px',
      'color: inherit',
      'color: #0066cc; background: #f0f0f0; padding: 2px 4px; border-radius: 3px; font-family: monospace',
      'color: inherit'
    );
  }
}
