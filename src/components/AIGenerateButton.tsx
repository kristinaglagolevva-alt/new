import { useState } from 'react';
import { Button } from './ui/button';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from './ui/dialog';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import { Loader2, Sparkles, AlertCircle } from 'lucide-react';
import { Alert, AlertDescription } from './ui/alert';

interface AIGenerateButtonProps {
  onGenerate: (content: string) => void;
  context?: {
    documentType?: 'act' | 'invoice' | 'contract';
    projectName?: string;
    additionalInfo?: string;
  };
  buttonVariant?: 'default' | 'outline' | 'ghost';
  buttonSize?: 'default' | 'sm' | 'lg';
}

export function AIGenerateButton({
  onGenerate,
  context,
  buttonVariant = 'outline',
  buttonSize = 'default',
}: AIGenerateButtonProps) {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [prompt, setPrompt] = useState('');
  const [error, setError] = useState<string | null>(null);

  const hasApiKey = Boolean(localStorage.getItem('OPENAI_API_KEY'));

  const handleGenerate = async () => {
    if (!hasApiKey) {
      setError('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      return;
    }

    if (!prompt.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const apiKey = localStorage.getItem('OPENAI_API_KEY');
      
      let systemPrompt = '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. ';
      systemPrompt += '–ì–µ–Ω–µ—Ä–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏. ';
      systemPrompt += '–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å.';

      let userPrompt = prompt;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (context?.documentType) {
        const typeLabels = {
          act: '–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç',
          invoice: '–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É',
          contract: '–î–æ–≥–æ–≤–æ—Ä',
        };
        userPrompt = `–°–æ–∑–¥–∞–π ${typeLabels[context.documentType]}.\n\n${userPrompt}`;
      }

      if (context?.projectName) {
        userPrompt += `\n\n–ü—Ä–æ–µ–∫—Ç: ${context.projectName}`;
      }

      if (context?.additionalInfo) {
        userPrompt += `\n\n${context.additionalInfo}`;
      }

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt },
          ],
          temperature: 0.7,
          max_tokens: 2000,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.error?.message || `–û—à–∏–±–∫–∞ API: ${response.status}`
        );
      }

      const data = await response.json();
      const generatedContent = data.choices[0]?.message?.content;

      if (!generatedContent) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
      }

      onGenerate(generatedContent);
      setOpen(false);
      setPrompt('');
    } catch (err) {
      console.error('AI generation error:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Button
        variant={buttonVariant}
        size={buttonSize}
        onClick={() => setOpen(true)}
        className="gap-2"
      >
        <Sparkles className="w-4 h-4" />
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å AI
      </Button>

      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-600" />
              –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é AI
            </DialogTitle>
            <DialogDescription>
              –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –∏ AI —Å–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—Å
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {!hasApiKey && (
              <Alert variant="destructive">
                <AlertCircle className="w-4 h-4" />
                <AlertDescription>
                  API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á.
                </AlertDescription>
              </Alert>
            )}

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="w-4 h-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-2">
              <Label htmlFor="ai-prompt">–ß—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?</Label>
              <Textarea
                id="ai-prompt"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–π –∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ò–≤–∞–Ω–æ–≤ –ò.–ò., –∑–∞–∫–∞–∑—á–∏–∫ - –û–û–û –ê–∫—Ç–µ—Ö. –†–∞–±–æ—Ç—ã: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ UI (40 —á–∞—Å–æ–≤), –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API (30 —á–∞—Å–æ–≤). –ü–µ—Ä–∏–æ–¥ - —è–Ω–≤–∞—Ä—å 2025."
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                rows={6}
                className="resize-none"
              />
              <p className="text-xs text-muted-foreground">
                –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              </p>
            </div>

            {context && (
              <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                <div className="text-sm text-blue-900">
                  <strong>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</strong>
                  {context.documentType && (
                    <div className="mt-1">
                      –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {context.documentType === 'act' ? '–ê–∫—Ç' : context.documentType === 'invoice' ? '–°—á–µ—Ç' : '–î–æ–≥–æ–≤–æ—Ä'}
                    </div>
                  )}
                  {context.projectName && (
                    <div className="mt-1">–ü—Ä–æ–µ–∫—Ç: {context.projectName}</div>
                  )}
                </div>
              </div>
            )}

            <div className="flex gap-2 justify-end">
              <Button
                variant="outline"
                onClick={() => setOpen(false)}
                disabled={loading}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button onClick={handleGenerate} disabled={loading || !hasApiKey}>
                {loading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                  </>
                )}
              </Button>
            </div>

            <div className="pt-3 border-t">
              <p className="text-xs text-muted-foreground">
                üí° –ú–æ–¥–µ–ª—å: GPT-4 | –°—Ç–æ–∏–º–æ—Å—Ç—å: ~$0.03-0.10 –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
              </p>
              <p className="text-xs text-muted-foreground mt-1">
                ‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
              </p>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
